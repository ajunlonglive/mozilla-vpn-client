name: Functional tests
on:
  push:
    branches:
      - main
      - 'releases/**'
  pull_request:
    branches:
      - main
      - 'releases/**'

jobs:
  test_list:
    name: Generate Tasklist
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.testGen.outputs.tests }}
    steps:
      - name: Install Packages
        run: |
          sudo apt update
          sudo apt install jq -y
      
      - name: Clone repository
        uses: actions/checkout@v2
      - id: testGen
        shell: bash
        run: |
          echo -n "::set-output name=tests::"
          for test in $(find tests/functional -name 'test*.js' | sort); do
            printf '{"name": "%s", "path": "%s"}' $(basename ${test%.js} | sed -n 's/test//p') $test
          done | jq -s -c
      - name: Check Tests
        shell: bash
        env:
          TEST_LIST: ${{ steps.testGen.outputs.tests }}
        run: |
          echo $TEST_LIST | jq

  functionaltests:
    name: Test ${{matrix.test.name}} on Qt-${{matrix.version }}
    needs: 
      - test_list
    runs-on: ubuntu-20.04
    timeout-minutes: 45
    strategy:
      fail-fast: false # Don't cancel other jobs if a test fails
      matrix:
        test: ${{ fromJson(needs.test_list.outputs.matrix) }}
        version: ["5.15.2","6.2.1"]
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Checkout submodules
        shell: bash
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
      - name: Cache build/
        id: cache-build
        uses: actions/cache@v2
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{matrix.version}}-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-ccache-${{matrix.version}}-main

      - name: Install Linux packages
        run: |
          sudo apt update
          sudo apt install git libgl-dev libegl-dev libpolkit-gobject-1-dev clang-10 liboath-dev python3 ccache -y
          sudo apt install -y autotools-dev libdbus-1-3 libdbus-1-dev libxcb1 libxcb1-dev libx11-xcb1 libx11-xcb-dev \
                              libxcb-keysyms1 libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4 libxcb-icccm4-dev \
                              libxcb-sync-dev libxcb-xfixes0-dev libxcb-render-util0-dev libxcb-shape0-dev libxcb-randr0-dev libxrender-dev \
                              libssl-dev libudev-dev libxkbcommon-dev libfontconfig1-dev libgl1-mesa-dev [!armel !armhf] | libgl-dev [!armel !armhf] \
                              libgles2-mesa-dev libglu-dev  \
                              libmtdev-dev unixodbc-dev freetds-dev libmysqlclient-dev libxkbfile-dev libsqlite3-dev libharfbuzz-dev \
                              libxkbcommon-x11-dev libasound2-dev libgstreamer-plugins-base1.0-dev libgstreamer1.0-dev libpulse-dev \
                              libproxy-dev libxss-dev libsnappy-dev libsrtp2-dev libflac++-dev libopus-dev libspeex-dev libjsoncpp-dev \
                              libvpx-dev re2c libevent-dev libopenal-dev libpq-dev libxcb-xinerama0-dev libvulkan-dev libxcb-util-dev libxcb-xinput-dev libxcb-glx0-dev

          python3 -m pip install aqtinstall
          aqt install-qt --outputdir /opt linux desktop ${{matrix.version}} gcc_64 -m all
          sudo cp -r /opt/${{matrix.version}}/gcc_64/lib /lib
          sudo apt install --no-upgrade firefox xvfb -y
          npm install
#          sudo add-apt-repository ppa:beineri/opt-qt-5.15.2-focal -y
#          sudo apt update
#          sudo apt-get install -y \
#              qt515base qt515tools qt515svg qt515networkauth-no-lgpl qt515charts-no-lgpl \
#              qt515quickcontrols2 qt515imageformats \
#              qt515graphicaleffects qt515websockets qt515declarative -y

      - name: Compile test client
        shell: bash
        run: |
          export PATH=/opt/${{matrix.version}}/gcc_64/bin:$PATH
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/${{matrix.version}}/gcc_64/lib
          pip3 install -r requirements.txt
          git submodule update --remote --depth 1 i18n
          python3 scripts/importLanguages.py
          python3 scripts/generate_glean.py
          # Delete unit tests, so we can get to testing faster
          sed -i '/tests\/unit/d' mozillavpn.pro
          qmake CONFIG+=DUMMY QMAKE_CXX=clang++ QMAKE_LINK=clang++ CONFIG+=debug CONFIG+=inspector QT+=svg
          make -j$(nproc)
          mkdir build/
          cp ./src/mozillavpn build/

      - name: Check build
        shell: bash
        run: ./build/mozillavpn -v

      - name: Launching API proxy
        shell: bash
        run: ./tests/proxy/wsgi.py --mock-devices > /dev/null &

      - name: Running ${{matrix.test.name}} Tests
        id: runTests
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 1
          command: |
            export PATH=$GECKOWEBDRIVER:$(npm bin):$PATH
            export HEADLESS=yes
            export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/${{matrix.version}}/gcc_64/lib
            mkdir -p $ARTIFACT_DIR
            xvfb-run -a npm run functionalTest -- ${{matrix.test.path}}
          on_retry_command: npm run cleanup-flaky-script-output
        env:
          ACCOUNT_EMAIL: ${{ secrets.ACCOUNT_EMAIL }}
          ACCOUNT_PASSWORD: ${{ secrets.ACCOUNT_PASSWORD }}
          ARTIFACT_DIR: ${{ runner.temp }}/artifacts
          MVPN_API_BASE_URL: http://localhost:5000
          MVPN_BIN: ./build/mozillavpn

      - name: Uploading artifacts
        uses: actions/upload-artifact@v1
        if: ${{ always() }}
        with:
          name: ${{matrix.test.name}} Logs
          path: ${{ runner.temp }}/artifacts

      - name: Show Cache Stats
        if: ${{ always() }}
        run: ccache -s